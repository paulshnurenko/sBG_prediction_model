{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# üìå Step 1: –Ü–º–ø–æ—Ä—Ç–∏\n",
        "import numpy as np\n",
        "from scipy.optimize import minimize\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "from google.auth import default\n",
        "import re\n",
        "import gspread\n",
        "from datetime import datetime\n"
      ],
      "metadata": {
        "id": "O2xXN6B_2x4I"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# üìå Step 1.5: –û—Ç—Ä–∏–º–∞–Ω–Ω—è retention —ñ–∑ Google Sheets\n",
        "\n",
        "# --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n",
        "sheet_url = 'https://docs.google.com/spreadsheets/d/1eZftkBNg8gFPzyo-WWBDsZNniXe-IkM3THpT4yqUCmI/edit?gid=624135906#gid=624135906'\n",
        "worksheet_name = 'Revenue cohort'\n",
        "cell_range = 'AI44:AS44'\n",
        "\n",
        "auth.authenticate_user()\n",
        "creds, _ = default()\n",
        "gc = gspread.authorize(creds)\n",
        "\n",
        "# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Google Sheet —ñ –ª–∏—Å—Ç\n",
        "spreadsheet = gc.open_by_url(sheet_url)\n",
        "worksheet = spreadsheet.worksheet(worksheet_name)\n",
        "\n",
        "# –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ —ñ–∑ –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–µ–Ω–¥–∂—É\n",
        "cells = worksheet.get(cell_range)\n",
        "if len(cells) > 0 and isinstance(cells[0], list):\n",
        "    cells = cells[0]  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫\n",
        "else:\n",
        "    cells = list(cells)\n",
        "\n",
        "print(\"–ó—á–∏—Ç–∞–Ω–æ —Ç–∞–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (—è–∫ —î):\", cells)\n",
        "\n",
        "def parse_float(val):\n",
        "    s = str(val).strip().replace(\"$\", \"\").replace(\"%\", \"\")\n",
        "    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–æ–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫ —Ç–∏—Å—è—á–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏)\n",
        "    s = s.replace(\",\", \"\")\n",
        "    # –Ø–∫—â–æ –ª–∏—à–∏–ª–∞—Å—å –∫—Ä–∞–ø–∫–∞ - –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫\n",
        "    try:\n",
        "        return float(s)\n",
        "    except:\n",
        "        return None\n",
        "\n",
        "values = [parse_float(v) for v in cells if str(v).strip() != \"\"]\n",
        "values = [v for v in values if v is not None]\n",
        "\n",
        "if len(values) == 0:\n",
        "    raise ValueError(\"–í —Ä–µ–Ω–¥–∂—ñ –Ω–µ–º–∞—î —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç!\")\n",
        "\n",
        "# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö\n",
        "has_percent = any(\"%\" in str(val) for val in cells)\n",
        "has_fraction = all(0 <= v <= 1 for v in values)\n",
        "\n",
        "# –û–±—Ä–æ–±–∫–∞ –∑–≥—ñ–¥–Ω–æ —Ç–≤–æ—î—ó –ª–æ–≥—ñ–∫–∏:\n",
        "if has_percent:\n",
        "    # –í—Å—ñ –≤–∂–µ —Å—Ç–∞–ª–∏ —á–∞—Å—Ç–∫–∞–º–∏\n",
        "    pass\n",
        "elif has_fraction:\n",
        "    # –ó–Ω–∞—á–µ–Ω–Ω—è –≤–∂–µ —á–∞—Å—Ç–∫–∏ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ\n",
        "    pass\n",
        "else:\n",
        "    # –ê–±—Å–æ–ª—é—Ç–Ω—ñ —á–∏—Å–ª–∞ (–≤ —Ç.—á. –≤–∞–ª—é—Ç–∞) ‚Äî –≤—Å—ñ –¥—ñ–ª–∏–º–æ –Ω–∞ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ (–≤–∫–ª—é—á–Ω–æ –∑ –ø–µ—Ä—à–∏–º!)\n",
        "    base = values[0]\n",
        "    values = [v / base for v in values]\n",
        "\n",
        "print(\"Observed retention (–º–∞—Å–∏–≤ –¥–ª—è –º–æ–¥–µ–ª—ñ):\", [round(x, 4) for x in values])\n",
        "observed_retention = values\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kyuGoKr7ng4h",
        "outputId": "2eb568d4-cdda-4583-da14-cebf7bdc5954"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–ó—á–∏—Ç–∞–Ω–æ —Ç–∞–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (—è–∫ —î): ['$86.28', '$88.42', '$86.21', '$71.26', '$86.43', '$70.29', '$70.09', '$69.67', '$70.56', '$69.90', '$69.32']\n",
            "Observed retention (–º–∞—Å–∏–≤ –¥–ª—è –º–æ–¥–µ–ª—ñ): [1.0, 1.0248, 0.9992, 0.8259, 1.0017, 0.8147, 0.8124, 0.8075, 0.8178, 0.8102, 0.8034]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# üìå Step 3: sBG-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É —Ä–µ—Ç–µ–Ω—à–Ω—É\n",
        "def sbg_retention(alpha, beta, periods):\n",
        "    retention = [1.0]\n",
        "    for t in range(1, periods):\n",
        "        p = beta / (alpha + beta + t - 1)\n",
        "        retention.append(retention[-1] * (1 - p))\n",
        "    return retention\n",
        "\n",
        "# üìå Step 4: Loss function (RMSE)\n",
        "def loss(params):\n",
        "    alpha, beta = params\n",
        "    predicted = sbg_retention(alpha, beta, len(observed_retention))\n",
        "    weights = np.ones_like(observed_retention)\n",
        "    weights[:4] = 3  # –ü–µ—Ä—à—ñ —Ç–∏–∂–Ω—ñ ‚Äî –≤—Ç—Ä–∏—á—ñ –≤–∞–∂–ª–∏–≤—ñ—à—ñ\n",
        "    return np.sqrt(np.average((np.array(predicted) - np.array(observed_retention))**2, weights=weights))\n",
        "\n",
        "\n",
        "# üìå Step 5: –ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö alpha —ñ beta\n",
        "res = minimize(\n",
        "    loss,\n",
        "    x0=[1.0, 1.0],\n",
        "    bounds=[(0.0000000001, 1000), (0.0000010000, 1000)],\n",
        "    method='Powell',\n",
        "    options={'xtol': 1e-8, 'ftol': 1e-10, 'disp': True}\n",
        ")\n",
        "alpha_opt, beta_opt = res.x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wBtyUK6d48ql",
        "outputId": "a6fc8164-d920-4be6-bbed-c80f80ae940f"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.056736\n",
            "         Iterations: 9\n",
            "         Function evaluations: 683\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# üìå Step 6: –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 53 —Ç–∏–∂–Ω—ñ (–∑ Week 0 –¥–æ Week 52)\n",
        "predicted_full = sbg_retention(alpha_opt, beta_opt, 53)  # 53 –∑–Ω–∞—á–µ–Ω–Ω—è: 0...52 —Ç–∏–∂–¥–µ–Ω—å\n",
        "\n",
        "# üìå Step 7: –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ (–ø–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂—É–≤–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—É)\n",
        "predicted_fit = sbg_retention(alpha_opt, beta_opt, len(observed_retention))\n",
        "rmse = np.sqrt(mean_squared_error(observed_retention, predicted_fit))\n",
        "mae = mean_absolute_error(observed_retention, predicted_fit)\n",
        "r2 = r2_score(observed_retention, predicted_fit)\n",
        "\n",
        "print(f\"\\nüîé –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\")\n",
        "print(f\"Alpha: {alpha_opt:.4f}\")\n",
        "print(f\"Beta:  {beta_opt:.4f}\")\n",
        "print(f\"\\nüìä RMSE: {rmse:.5f}\")\n",
        "print(f\"üìä MAE:  {mae:.5f}\")\n",
        "print(f\"üìä R¬≤:   {r2:.5f}\\n\")\n",
        "\n",
        "# üìå Step 8: –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(range(0, len(observed_retention)), observed_retention, 'o-', label='Observed')\n",
        "plt.plot(range(0, 53), predicted_full, '--', label='Predicted (sBG)')\n",
        "plt.xlabel(\"Week\")\n",
        "plt.ylabel(\"Retention\")\n",
        "plt.legend()\n",
        "plt.title(\"sBG Retention Prediction up to Week 52\")\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# üìå Step 9: –í–∏–≤—ñ–¥ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å\n",
        "print(\"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å sBG retention (–¥–æ 52 —Ç–∏–∂–Ω—ñ–≤):\")\n",
        "for i, r in enumerate(predicted_full):\n",
        "    print(f\"Week {i}: {round(r, 4)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uhEpPlwz5JiT",
        "outputId": "6a369c79-b16d-47a1-9a6f-2aa724062708"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üîé –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n",
            "Alpha: 15.3965\n",
            "Beta:  0.4964\n",
            "\n",
            "üìä RMSE: 0.05423\n",
            "üìä MAE:  0.04310\n",
            "üìä R¬≤:   0.66266\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å sBG retention (–¥–æ 52 —Ç–∏–∂–Ω—ñ–≤):\n",
            "Week 0: 1.0\n",
            "Week 1: 0.9688\n",
            "Week 2: 0.9403\n",
            "Week 3: 0.9142\n",
            "Week 4: 0.8902\n",
            "Week 5: 0.868\n",
            "Week 6: 0.8473\n",
            "Week 7: 0.8281\n",
            "Week 8: 0.8102\n",
            "Week 9: 0.7933\n",
            "Week 10: 0.7775\n",
            "Week 11: 0.7626\n",
            "Week 12: 0.7485\n",
            "Week 13: 0.7352\n",
            "Week 14: 0.7226\n",
            "Week 15: 0.7106\n",
            "Week 16: 0.6992\n",
            "Week 17: 0.6883\n",
            "Week 18: 0.6779\n",
            "Week 19: 0.668\n",
            "Week 20: 0.6585\n",
            "Week 21: 0.6494\n",
            "Week 22: 0.6406\n",
            "Week 23: 0.6322\n",
            "Week 24: 0.6242\n",
            "Week 25: 0.6164\n",
            "Week 26: 0.6089\n",
            "Week 27: 0.6017\n",
            "Week 28: 0.5947\n",
            "Week 29: 0.588\n",
            "Week 30: 0.5815\n",
            "Week 31: 0.5752\n",
            "Week 32: 0.5691\n",
            "Week 33: 0.5632\n",
            "Week 34: 0.5575\n",
            "Week 35: 0.5519\n",
            "Week 36: 0.5466\n",
            "Week 37: 0.5413\n",
            "Week 38: 0.5363\n",
            "Week 39: 0.5313\n",
            "Week 40: 0.5265\n",
            "Week 41: 0.5218\n",
            "Week 42: 0.5173\n",
            "Week 43: 0.5128\n",
            "Week 44: 0.5085\n",
            "Week 45: 0.5043\n",
            "Week 46: 0.5002\n",
            "Week 47: 0.4962\n",
            "Week 48: 0.4923\n",
            "Week 49: 0.4884\n",
            "Week 50: 0.4847\n",
            "Week 51: 0.4811\n",
            "Week 52: 0.4775\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# predicted_full ‚Äî –º–∞—Å–∏–≤ –ø—Ä–µ–¥—ñ–∫—à–µ–Ω—É (–º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ Week 0)\n",
        "\n",
        "prediction_sheet_name = 'Colab Prediction'\n",
        "\n",
        "# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é\n",
        "spreadsheet = gc.open_by_url(sheet_url)\n",
        "\n",
        "# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ‚Äî —á–∏ —ñ—Å–Ω—É—î –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ª–∏—Å—Ç\n",
        "try:\n",
        "    ws_pred = spreadsheet.worksheet(prediction_sheet_name)\n",
        "except gspread.WorksheetNotFound:\n",
        "    ws_pred = spreadsheet.add_worksheet(title=prediction_sheet_name, rows=\"100\", cols=\"100\")\n",
        "\n",
        "# –û—Ç—Ä–∏–º—É—î–º–æ header (–∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ)\n",
        "header = ws_pred.row_values(1)\n",
        "# –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π header\n",
        "expected_header = [\"Sheet\", \"Range\", \"Date and Time\"]\n",
        "week_headers = [f\"Week {i}\" for i in range(len(predicted_full))]\n",
        "full_header = expected_header + week_headers\n",
        "\n",
        "# –î–æ–¥–∞—î–º–æ –Ω–µ–¥–æ—Å—Ç–∞—é—á—ñ –∫–æ–ª–æ–Ω–∫–∏\n",
        "if len(header) < len(full_header):\n",
        "    # –Ø–∫—â–æ —â–µ –Ω–µ–º–∞—î header ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ\n",
        "    ws_pred.update('A1', [full_header])\n",
        "    header = full_header\n",
        "else:\n",
        "    # –Ø–∫—â–æ –≤–∂–µ —î ‚Äî –¥–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ Week N, —è–∫–∏—Ö –Ω–µ –±—É–ª–æ\n",
        "    new_weeks = [wh for wh in week_headers if wh not in header]\n",
        "    if new_weeks:\n",
        "        last_col = len(header)\n",
        "        for i, col_name in enumerate(new_weeks):\n",
        "            ws_pred.update_cell(1, last_col + i + 1, col_name)\n",
        "        header = ws_pred.row_values(1)\n",
        "\n",
        "# –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞\n",
        "row = [worksheet_name, cell_range, datetime.now().strftime('%Y-%m-%d %H:%M:%S')] + list(predicted_full)\n",
        "# –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –≤—ñ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫\n",
        "all_rows = ws_pred.get_all_values()\n",
        "row_idx = len(all_rows) + 1\n",
        "\n",
        "# –ó–∞–ø–∏—Å—É—î–º–æ (–¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫)\n",
        "ws_pred.insert_row(row, row_idx)\n",
        "\n",
        "print(\"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–¥–∞–Ω–æ —É –ª–∏—Å—Ç 'Colab Prediction'.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJ4oUdDRggki",
        "outputId": "1556deea-428c-491d-b794-e422767a21d2"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–¥–∞–Ω–æ —É –ª–∏—Å—Ç 'Colab Prediction'.\n"
          ]
        }
      ]
    }
  ]
}